import uuid
import datetime
import argparse


parser = argparse.ArgumentParser(description="uuidv1 exploit kit.")


parser.add_argument('-g', '--generate', metavar=('timestamp', 'mac'), type=str,nargs=2, help='generate uuid from a timestamp and a MAC adress.')
parser.add_argument('-s', '--sandwich', metavar=('uuid1', 'uuid2'), type=str,nargs=2, help='make a sandwich attack.')

args = parser.parse_args()


def generate_uuid(mac_adress: str, date):
    if isinstance(date, list):
        date = date[0]  

    timestamp = datetime.datetime.strptime(str(date), '%Y-%m-%d %H:%M:%S.%f')

    # UUIDv1 uses a timestamp in the number of 100-nanosecond intervals since the UUID epoch (October 15, 1582)
    UUID_EPOCH_START = datetime.datetime(1582, 10, 15)

    intervals = int((timestamp - UUID_EPOCH_START).total_seconds() * 10**7)
    time_low = intervals & 0xFFFFFFFF
    time_mid = (intervals >> 32) & 0xFFFF
    time_hi_and_version = ((intervals >> 48) & 0x0FFF) | (1 << 12)  # Version 1

    mac_address = mac_adress  
    # Convert MAC address to integer
    node = int(mac_address.replace(':', ''), 16)

    clock_seq = uuid.getnode() & 0x3FFF

    generated_uuid = uuid.UUID(fields=(
        time_low,                    # time_low
        time_mid,                    # time_mid
        time_hi_and_version,         # time_hi_and_version (with version)
        (clock_seq >> 8) & 0xFF,     # clock_seq_hi_variant
        clock_seq & 0xFF,            # clock_seq_low
        node                         # node
    ))

    print(f"Generated UUIDv1: {generated_uuid}")
    return generate_uuid

def sandwich_uuid(uuid1:str, uuid2:str):
    pass

if __name__ == "__main__":
    if (args.generate):
        timestamp, mac = args.generate
        timestamp = args.generate
        generate_uuid(mac, timestamp)

    elif (args.sandwich):
        uuid1, uuid2 = args.sandwich
